--When should i use while loop?
 while(boolean)//it will run till the condition becomes false

 --do-while loop
  1 loop of execution is guarantee (do loop)
  while don't have body

  --Interface

-all variables in Interface class are by default public in nature if we haven't defined any specific
-one class can implemets multiple interface classes,(to access need to create object for each interface
-and to access method of implemeted class , create object of that class

public interface class Alpha()
{
  public void capital();
  public void small();
}

public Letters implements Alpha()
{
 psvm()
 {
  Alpha a=new Letters();
  //create object of implemeted class to access implemented methods present in interface class

 }
}

============Abstarction
is a process of hiding the implementation of the details from the user,
only the funtionality will be provided to the user,
in other words the user will have the information on what the object does instead of how it does it.
e.g Car

Abstract classes & methods:
Class which is declare with abstract keyword is known as abstract class in java
It can have abstract (method without the body ) and non abstract methods (methods with the body)
Abstract classes achieve partial abstraction
Interface can achieve 100 % Abstraction

--methods which are within abstract class should be public/ protected
--we can not instatiate object for abstract class,child classes are forced to implement abstarct methods of parent class

====================Interface
contains only abtract methods
access specifieres for methods -Public
Variables defined must be public, static, final
To implement an interface we use implemets keyword

====================Absract
contains abstract and concrete methods(non abstract)
access specifier for methods-Except private any one
Except private variable can have any access specifier
to implement an abstract class we use extends keword


============================Method overloading
public void payment(String debitCard)
{
}
public void payment(String creaditCard)
{
}
public void payment(String Gpay)
{
}

---same methode name,same signature, different arguments
=============================methode overriding
--same methode name,same signature, same arguments within different class..(child /parent )

==================================Array-
A container which stores multiple values of same data type
int a[]=new int[5]//declared and allocated memory
int a[0]=2;//initialization

int b[]={1,2,3,4,5}//declare and initialize ..memeory allocation is dynamic based on mentioned values

Multidimensional Array:
int a[x axis or rows][y axis or colums]

find out min /max from array

==================Date
Java.util package contain

Date d=new Date();
sop(d.toString);


================Constructor
-name of constructor should be same as class name
-at the time of object creation first constructor will call
- if we not define any constructor by default there is default contructor is getting call


===================super keyword
to get access for parent class variables having same name use super keyword
to get access for parent class method use super.methodeName which have same name keyword
to get access for parent class constructor use super();

=========================//this keyword demo



                         package coreJava;public class thisDemo {

                         int a= 2;

                          public void getData()
                          {
                         int a= 3;
                         int b=a+this.a;
                         System.out.println(a);
                         System.out.println(this.a);
                         System.out.println(b);


                         // this refers to curent object- object scope lies in class level
                         }
                         //


                         public static void main(String[] args) {
                         // TODO Auto-generated method stub



                         thisDemo td=new thisDemo();
                         td.getData();
                         }

                         }


                         ======================================
                         Static Variables ==
                         class variables
                         Independant on object
                         ============================
                         final
                         final keyword before any variable--means we can not change its value
                         -constant variable

                         --if class is final
                         we can not extends that class(cant inherit)

                         --if methode is final
                         we can not override it


                         ================package
                         Package- set of classes
                         Class A can use the Class B by creating object --if both classes belongs to same package

                         Class A can use the Class B by creating object & import package
                          --if both classes belongs to different package

                         e.g:
                         import.packagename.classname

                         ====================access modifiers
                         public -access across all the packages
                         private -access within classes, you can not access method or variable out side the class of same package
                         protected - you can access those in sub classes only (other packages)
                         access in child class even if its in other package, prerequisiste is to extends parent class which have
                          the protected method or variable
                         default- access anywhere within package
                         ==================Java Collection
                         collection of interfaces and classes which help in storing and processing data efficiently.
                         This framework has several useful classes which have tons of useful functions which makes programmer task super easy

                         List -
                         is ordered collection, contain duplicate elements

                         ArrayList
                         LinkedList
                         Vector

                         ===ArrayList
                         ArrayList<String> a= new ArrayList<String>;
                         --have dynamic size by add and remove size can varry
                         a.add("string name")-add element
                         add(0,""stringname)
                         a.remove(1);
                         a.remove("Stringname")
                         a.get(2);
                         a.contains("testing")
                         a.indexOf("rahul")
                         a.isEmpty()
                         a.size();

                         --duplicate allowed
                         --All ArrayList,LinkedList, Vector-Implementing List Interface
                         --Array have fixed size where as arraylist can grow dynamically
                         --you can access and insert any value in any index

                         =================Set (I)
                         -HashSet, TreeSet, LinkedHashset implements set interface
                         -does not accept duplicate values
                         -there is no guarantee element stored in sequesntial order. random order

                         HashSet<String> hs =new HashSet<>;
                         add();
                         remove();
                         isEmpty();
                         size();

                         ================Iterator
                         Iterator<String> it=hs.iterator();//iterate each element from set
                         //i.next();0th index
                         //i.next();1st index

                         while(i.hasext())
                         {
                         sop(i.next());
                         }


                         =======================HashMap
                         HashMap<Integer,String> hm=new Hashmap<Integer,String>();
                         put(key, value);
                         get(key);
                         remove(key);
                         Set sn=entrySet();

                         to ptint
                         Iterator it=sn.iterator();
                         while(it.hasNext)
                         {
                         sop(it.next)//will confuse which have to print key or value

                         so use below
                         Map.Entry mp=(Map.Entry)it.next();
                         mp.getKey();
                         mp.getValue();
                         }


                         =========================HashTable
                         if 5 different program working on HashMap at same time -- means not Synchronized

                         The operation of first program complete and then second start --so its synchronized and tread safe as its wait to complete for complete the first thread complete

                         HashMap allow one null key and multiple null values
                         Hashtable do not allow null keys and values

What is Abstraction?
Abstraction is an OOPS concept to construct the structure of the real world objects. During this construction only the general states and behaviors are taken and more specific states and behaviors are left aside for the implementers.

What is Encapsulation?
Encapsulation is an OOPS concept to create and define the permissions and restrictions of an object and its member variables and methods.
 A very simple example to explain the concept is to make the member variables of a class private and providing public getter and setter methods.
 Java provides four types of access level modifiers: public, protected, no modifier and private.

What is the difference between Abstraction and Encapsulation?
“Program to interfaces, not implementations” is the principle for Abstraction and “Encapsulate what varies” is the OO principle for Encapsulation.
Abstraction provides a general structure of a class and leaves the details for the implementers. Encapsulation is to create and define the permissions and restrictions of an object and its member variables and methods.
Abstraction is implemented in Java using interface and abstract class while Encapsulation is implemented using four types of access level modifiers: public, protected, no modifier and private.
What is Polymorphism?
Polymorphism is the occurrence of something in various forms. Java supports various forms of polymorphism like polymorphic reference variables, polymorphic method, polymorphic return types and polymorphic argument types.

What is Inheritance?
A subclass can inherit the states and behaviors of it’s super class is known as inheritance.

What is multiple inheritance?
A child class inheriting states and behaviors from multiple parent classes is known as multiple inheritance.

What is the diamond problem in inheritance?
In case of multiple inheritance, suppose class A has two subclasses B and C, and a class D has two super classes B and C.If a method present in A is overridden by both B and C but not by D then from which class D will inherit that method B or C?
This problem is known as diamond problem.

Why Java does not support multiple inheritance?
Java was designed to be a simple language and multiple inheritance introduces complexities like diamond problem.
 Inheriting states or behaviors from two different type of classes is a case which in reality very rare
 and it can be achieved easily through an object association.

What is Static Binding and Dynamic Binding?
Static or early binding is resolved at compile time. Method overloading is an example of static binding.

Dynamic or late or virtual binding is resolved at run time. Method overriding is an example of dynamic binding.

What is a Class?
A class is the specification or template of an object.

What is an Object?
Object is instance of class.

Java interview questions
What is Runtime Polymorphism?
Runtime polymorphism or dynamic method dispatch is a process in which a call to an overridden method is resolved at runtime rather than at compile-time.

In this process, an overridden method is called through the reference variable of a super class. The

 What is the difference between abstraction and encapsulation?
Abstraction hides the implementation details whereas encapsulation wraps code and data into a single unit.



 What is abstract class?
A class that is declared as abstract is known as abstract class. It needs to be extended and its method implemented. It cannot be instantiated.

 Can there be any abstract method without abstract class?
No, if there is any abstract method in a class, that class must be abstract.

Can you use abstract and final both with a method?
No, because abstract method needs to be overridden whereas you can't override final method.

Is it possible to instantiate the abstract class?
No, abstract class can never be instantiated.

What is interface?

Interface is a blueprint of a class that have static constants and abstract methods.
It can be used to achieve fully abstraction and multiple inheritance.



 Can you declare an interface method static?

No, because methods of an interface is abstract by default, and static and abstract keywords can't be used together.

 Can an Interface be final?
No, because its implementation is provided by another class.

 What is marker interface?
An interface that have no data member and method is known as a marker interface.For example Serializable, Cloneable etc.

 What is difference between abstract class and interface?
Abstract class	Interface
1)An abstract class can have method body (non-abstract methods).	Interface have only abstract methods.
2)An abstract class can have instance variables.	An interface cannot have instance variables.
3)An abstract class can have constructor.	Interface cannot have constructor.
4)An abstract class can have static methods.	Interface cannot have static methods.
5)You can extends one abstract class.	You can implement multiple interfaces.
 Can we define private and protected modifiers for variables in interfaces?
No, they are implicitly public.

 When can an object reference be cast to an interface reference?
An object reference can be cast to an interface reference when the object implements the referenced interface.

Resources for this lecture













